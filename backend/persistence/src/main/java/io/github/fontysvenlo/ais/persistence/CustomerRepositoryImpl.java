package io.github.fontysvenlo.ais.persistence;

import io.github.fontysvenlo.ais.persistence.api.CustomerRepository;
import java.util.List;
import javax.sql.DataSource;

import io.github.fontysvenlo.ais.datarecords.CustomerData;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

/**
 * This class knows everything about storing and retrieving customers from the database.
 * At the moment only returns dummy object with an id that is set.
 * Normally it will connect to a database and do all the handling.
 */
class CustomerRepositoryImpl implements CustomerRepository {
    
    private final DataSource db;
    private final List<CustomerData> customers = new ArrayList<>(Arrays.asList(new CustomerData(1, "John", "Doe", LocalDate.of(2025, 1, 1)))); 
    //private final List<CustomerData> customers = new ArrayList<>(); 
    
    /* public CustomerRepositoryImpl(DBConfig config) {
        this.db = DBProvider.getDataSource(config);
    } */
    public CustomerRepositoryImpl(DBConfig config) {
        this.db = DBProvider.getDataSource(config);
        
        
        // Print database connection details for debugging
        try (var connection = db.getConnection()) {
            System.out.println("Connected to database: " + connection.getMetaData().getURL());
            System.out.println("Database user: " + connection.getMetaData().getUserName());
        } catch (Exception e) {
            System.err.println("Database connection failed: " + e.getMessage());
        }
    }

    /**
     * @see CustomerRepository#add(CustomerData)
     */
    @Override
    public CustomerData add(CustomerData customerData) {
        // Create dummy customerData object with id. Normally, the id would be generated by the database
        int maxId = customers.stream().mapToInt(CustomerData::id).max().orElse(0);
        CustomerData customerDataWithId = new CustomerData( ++maxId, customerData.firstName(), customerData.lastName(), customerData.dateOfBirth());
        customers.add(customerDataWithId);
        return customerDataWithId;
    }

    /**
     * @see CustomerRepository#getAll()
     */
    @Override
    public List<CustomerData> getAll() {
    List<CustomerData> customers = new ArrayList<>();
     String query = "SELECT id, first_name, last_name, date_of_birth FROM customers";
    
    try (var connection = db.getConnection();
        var statement = connection.prepareStatement(query);
         var resultSet = statement.executeQuery()) {

        while (resultSet.next()) {
            customers.add(new CustomerData(
                resultSet.getInt("id"),
                resultSet.getString("first_name"),
                resultSet.getString("last_name"),
                resultSet.getDate("date_of_birth").toLocalDate()
            ));
         }
     } catch (Exception e) {
         e.printStackTrace(); // Handle errors properly in production
     }
    
     return customers;
 }

//        return Collections.unmodifiableList(customers);

    }


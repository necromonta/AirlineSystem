package io.github.fontysvenlo.ais.persistence;


import io.github.fontysvenlo.ais.persistence.api.FlightRepository;


import java.util.List;
import javax.sql.DataSource;

import io.github.fontysvenlo.ais.datarecords.CustomerData;
import io.github.fontysvenlo.ais.datarecords.FlightData;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import io.github.fontysvenlo.ais.persistence.api.FlightRepository;


/**
 * This class knows everything about storing and retrieving Flights from the database.
 * At the moment only returns dummy object with an id that is set.
 * Normally it will connect to a database and do all the handling.
 */
class FlightRepositoryImpl implements FlightRepository {
    
    private final DataSource db;
    private final List<FlightData> flights = new ArrayList<>(Arrays.asList(
            new FlightData(1, "Budapest", "Eindhoven", LocalDate.of(2025, 1, 2)),
            new FlightData(2, "Amsterdam", "Eindhoven", LocalDate.of(2004, 3, 2)),
            new FlightData(3, "Eindhoven", "Budapest", LocalDate.of(2004, 3, 3)),
            new FlightData(4, "Eindhoven", "Amsterdam", LocalDate.of(2004, 3, 4)),
            new FlightData(5, "Budapest", "Amsterdam", LocalDate.of(2004, 3, 5))
    ));
    //private final List<FlightData> flights = new ArrayList<>(); 
    
    public FlightRepositoryImpl(DBConfig config) {
        this.db = DBProvider.getDataSource(config);
    }

    /**
     * @see FlightRepository#add(FlightData)
     */
    @Override
    public FlightData add(FlightData FlightData) {
        // Create dummy FlightData object with id. Normally, the id would be generated by the database
       // System.out.println(FlightData.toString());
        FlightData FlightDataWithId = new FlightData( flights.get(flights.size()-1).id()+1, FlightData.origin(), FlightData.destination(), FlightData.departureDate());
        flights.add(FlightDataWithId);
        return FlightData;
    }

    /**
     * @see FlightRepository#getAll()
     */
    @Override
    public List<FlightData> getAll() {
        // TODO: Implement the actual database storage
        // For now, return a dummy list
        return Collections.unmodifiableList(flights);
    }

  
  
}



package io.github.fontysvenlo.ais.persistence;


import io.github.fontysvenlo.ais.persistence.api.FlightRepository;


import java.util.List;
import javax.sql.DataSource;

import io.github.fontysvenlo.ais.datarecords.CustomerData;
import io.github.fontysvenlo.ais.datarecords.FlightData;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

import io.github.fontysvenlo.ais.persistence.api.FlightRepository;


/**
 * This class knows everything about storing and retrieving Flights from the database.
 * At the moment only returns dummy object with an id that is set.
 * Normally it will connect to a database and do all the handling.
 */
class FlightRepositoryImpl implements FlightRepository {
    
    private final DataSource db;
    private final List<FlightData> flights = new ArrayList<>();
  
    
    public FlightRepositoryImpl(DBConfig config) {
        this.db = DBProvider.getDataSource(config);
    }

    /**
     * @see FlightRepository#add(FlightData)
     */
    @Override
    public FlightData add(FlightData FlightData) {
        // Create dummy FlightData object with id. Normally, the id would be generated by the database
       // System.out.println(FlightData.toString());
        FlightData FlightDataWithId = new FlightData( flights.get(flights.size()-1).id()+1, FlightData.origin(), FlightData.destination(), FlightData.departureDate(),FlightData.distance());
        flights.add(FlightDataWithId);
        return FlightData;
    }

    /**
     * @see FlightRepository#getAll()
     */
    @Override
    public List<FlightData> getAll() {
        List<FlightData> flights = new ArrayList<>();
      String query = "SELECT id, origin, destination, flight_date ,distance FROM flights";
     
     try (var connection = db.getConnection();
         var statement = connection.prepareStatement(query);
          var resultSet = statement.executeQuery()) {
 
         while (resultSet.next()) {
             flights.add(new FlightData(
                 resultSet.getInt("id"),
                 resultSet.getString("origin"),
                 resultSet.getString("destination"),
                 resultSet.getDate("flight_date").toLocalDate(),
                 resultSet.getInt("distance")
             ));
          }
      } catch (Exception e) {
          e.printStackTrace(); // Handle errors properly in production
      }
     
      return flights;
  }

  
  
}


